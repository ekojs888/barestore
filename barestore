#!/bin/bash
# backup_restore.sh
# Script untuk backup & restore dengan config dinamis + enkripsi opsional

CONFIG="/etc/barestore.conf"
#BASE_DIR="/root/Documents/barestore"
BACKUP_DIR="/var/lib/barestore"
TMP_RESTORE="/tmp/restore_tmp"
READMEDIR="/usr/share/doc/barestore"

mkdir -p "$BACKUP_DIR"

backup() {
    MODE="$1"       # tar.gz atau folder
    ENCRYPT="$2"    # true/false
    echo "=== Mulai Backup (mode: $MODE) ==="
    declare -a paths_to_backup=()

    while read -r path do_backup do_restore; do
        [[ "$path" =~ ^#.*$ || -z "$path" ]] && continue
        if [[ "$do_backup" == "yes" ]]; then
            matches=$(ls -d $path 2>/dev/null)
            if [[ $? -ne 0 || -z "$matches" ]]; then
                echo "❌ Path $path tidak ditemukan."
                read -p "Mau lanjut backup (y/n)? " ans
                [[ "$ans" != "y" ]] && exit 1
                continue
            fi
            for m in $matches; do
                paths_to_backup+=("$m")
            done
        fi
    done < "$CONFIG"

    if [[ ${#paths_to_backup[@]} -eq 0 ]]; then
        echo "Tidak ada file untuk dibackup."
        exit 1
    fi

    if [[ "$MODE" == "tar.gz" ]]; then
        BACKUP_FILE="$BACKUP_DIR/backup_$(date +%Y%m%d_%H%M%S).tar.gz"
        TMP_FILE="/tmp/backup_$(date +%Y%m%d_%H%M%S).tar.gz"

        # Buat arsip tar.gz dulu
        tar -czf "$TMP_FILE" "${paths_to_backup[@]}"
        if [[ $? -ne 0 ]]; then
            echo "❌ Gagal membuat arsip backup."
            exit 1
        fi

        if [[ "$ENCRYPT" == "true" ]]; then
            echo "Masukkan password untuk enkripsi backup:"
            gpg --symmetric --cipher-algo AES256 "$TMP_FILE"
            if [[ $? -eq 0 ]]; then
                mv "$TMP_FILE.gpg" "$BACKUP_FILE.gpg"
                rm -f "$TMP_FILE"
                echo "✅ Backup terenkripsi selesai: $BACKUP_FILE.gpg"
            else
                echo "❌ Gagal enkripsi backup."
                exit 1
            fi
        else
            mv "$TMP_FILE" "$BACKUP_FILE"
            echo "✅ Backup selesai: $BACKUP_FILE"
        fi
    elif [[ "$MODE" == "folder" ]]; then
        BACKUP_FOLDER="$BACKUP_DIR/backup_$(date +%Y%m%d_%H%M%S)"
        mkdir -p "$BACKUP_FOLDER"
        for f in "${paths_to_backup[@]}"; do
            echo "Salin $f → $BACKUP_FOLDER"
            cp -r --parents "$f" "$BACKUP_FOLDER"
        done
        echo "✅ Backup selesai di folder: $BACKUP_FOLDER"
    else
        echo "❌ Mode tidak dikenali: $MODE"
        exit 1
    fi
}

restore() {
    BACKUP_TO_RESTORE="$1"
    if [[ ! -e "$BACKUP_TO_RESTORE" ]]; then
        echo "❌ File/folder backup tidak ditemukan."
        exit 1
    fi

    echo "=== Mulai Restore ==="

    # Deteksi backup terenkripsi
    if [[ "$BACKUP_TO_RESTORE" == *.gpg ]]; then
        mkdir -p "$TMP_RESTORE"
        echo "Masukkan password untuk dekripsi backup:"
        gpg --output "$TMP_RESTORE/backup.tar.gz" --decrypt "$BACKUP_TO_RESTORE"
        if [[ $? -ne 0 ]]; then
            echo "❌ Gagal dekripsi backup."
            exit 1
        fi
        BACKUP_TO_RESTORE="$TMP_RESTORE/backup.tar.gz"
    fi

    if [[ -d "$BACKUP_TO_RESTORE" ]]; then
        # Mode folder
        cd "$BACKUP_TO_RESTORE" || exit 1
        find . -type f | while read -r rel; do
            target="/$rel"
            echo "Restore $rel → $target"
            cp -r "$rel" "$target"
        done
        echo "✅ Restore dari folder selesai."
    elif [[ "$BACKUP_TO_RESTORE" == *.tar.gz ]]; then
        mkdir -p "$TMP_RESTORE"
        tar -xzf "$BACKUP_TO_RESTORE" -C "$TMP_RESTORE"
        while read -r path do_backup do_restore; do
            [[ "$path" =~ ^#.*$ || -z "$path" ]] && continue
            if [[ "$do_restore" == "yes" ]]; then
                matches=$(ls -d $TMP_RESTORE$path 2>/dev/null)
                if [[ $? -ne 0 || -z "$matches" ]]; then
                    echo "❌ File $path gagal direstore."
                    read -p "Skip file ini (s) atau rollback semua (r)? " choice
                    if [[ "$choice" == "r" ]]; then
                        echo "Rollback semua restore..."
                        rm -rf "$TMP_RESTORE"
                        exit 1
                    else
                        echo "Skip $path"
                        continue
                    fi
                fi
                echo "Restore $path → $path"
                cp -r "$TMP_RESTORE$path" "$path"
            fi
        done < "$CONFIG"
        rm -rf "$TMP_RESTORE"
        echo "✅ Restore dari tar.gz selesai."
    else
        echo "❌ Format backup tidak dikenali."
        exit 1
    fi
}

README_FILE="$READMEDIR/README"
show_help() {
    if [[ -f "$README_FILE" ]]; then
        cat "$README_FILE"
    else
        echo "README tidak ditemukan: $README_FILE"
        echo "Silakan buat README untuk dokumentasi."
    fi
}

case "$1" in
    backup)
        ENCRYPT=false
        if [[ "$2" == "--tar" ]]; then
            [[ "$3" == "--passwd" ]] && ENCRYPT=true
            backup "tar.gz" "$ENCRYPT"
        elif [[ "$2" == "--dir" ]]; then
            [[ "$3" == "--passwd" ]] && echo "⚠️ Folder backup belum bisa dienkripsi, gunakan --tar"
            backup "folder" "$ENCRYPT"
        else
            echo "Gunakan: $0 backup [--tar|--dir] [--passwd]"
            exit 1
        fi
        ;;
    restore)
        if [[ -z "$2" ]]; then
            echo "Gunakan: $0 restore <file_backup.tar.gz|folder_backup|.gpg>"
            exit 1
        fi
        restore "$2"
        ;;
    --help|-h)
        show_help
        ;;
    *)
        echo "Gunakan: $0 {backup [--tar|--dir] [--passwd]|restore <file|folder|.gpg>}"
        exit 1
        ;;
esac

